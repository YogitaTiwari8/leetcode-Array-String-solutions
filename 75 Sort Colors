// LeetCode: 75
// Problem name: Sort Colors
// https://leetcode.com/problems/sort-colors/
// Category: Array, Two Pointers, Sorting
// Approach:
// - This problem is solved using the Dutch National Flag algorithm.
// - We use three pointers: 
//   - low: boundary for 0
//   - mid: current pointer
//   - high: boundary for 2
// - Based on the value at mid, we decide to swap with low (for 0), move on (for 1), or swap with high (for 2)

Solution
--
class Solution {
    static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void sortColors(int[] nums) {
        int low = 0;
        int mid = 0;
        int high = nums.length - 1;

        while (mid <= high) {
            if (nums[mid] == 0) {
                swap(nums, low, mid);
                low++;
                mid++;
            } else if (nums[mid] == 1) {
                mid++;
            } else {
                swap(nums, mid, high);
                high--;
            }
        }
    }
}
--
