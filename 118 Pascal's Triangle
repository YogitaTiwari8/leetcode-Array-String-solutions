/*
 * LeetCode: 118
 * Problem: Pascal's Triangle
 * Link: https://leetcode.com/problems/pascals-triangle/
 *
 * Approach:
 * - We generate each row one by one up to numRows.
 * - The first and last elements of every row are always 1.
 * - Every other element is the sum of the two elements directly above it from the previous row:
 *     triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j]
 * - We use a nested loop to build each row and add it to the triangle list.
 */

Solution
--
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> triangle = new ArrayList<>();

        for (int i = 0; i < numRows; i++) {
            List<Integer> row = new ArrayList<>();

            for (int j = 0; j <= i; j++) {
                // First and last elements of the row are always 1
                if (j == 0 || j == i) {
                    row.add(1);
                } else {
                    int first = triangle.get(i - 1).get(j - 1);
                    int second = triangle.get(i - 1).get(j);
                    row.add(first + second);
                }
            }

            triangle.add(row);
        }

        return triangle;
    }
}
--
