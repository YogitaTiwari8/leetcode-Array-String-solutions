// LeetCode: 33
// Problem name: Search in Rotated Sorted Array
// https://leetcode.com/problems/search-in-rotated-sorted-array/
// Approach:
// - Use modified binary search to find target in rotated sorted array
// - Check which side (left or right) of the array is sorted
// - Based on where the target lies, adjust the low and high pointers accordingly

Solution
--
class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;

        while (low <= high) {
            int mid = (low + high) / 2;

            if (nums[mid] == target) {
                return mid;
            }

            // Check if left side is sorted
            if (nums[low] <= nums[mid]) {
                if (nums[low] <= target && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } 
            // Right side is sorted
            else {
                if (nums[mid] < target && target <= nums[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }

        return -1;
    }
}
--
