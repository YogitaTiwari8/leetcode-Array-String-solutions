/*
 * Leetcode: 74
 * Problem: Search a 2D Matrix
 * Link: https://leetcode.com/problems/search-a-2d-matrix/
 * 
 * Matrix Properties:
 * - Integers in each row are sorted from left to right.
 * - The first integer of each row is greater than the last integer of the previous row.
 * 
 * Approach:
 * 1. Since each row is sorted and rows are ordered like a 1D sorted array,
 *    we can treat the matrix as a combination of sorted rows.
 * 2. First use binary search to find the potential row where the target can exist.
 *    - Check if the target is between the first and last element of that row.
 * 3. Then use binary search in that row to find the target.
 */

Solution
--
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;        // number of rows
        int n = matrix[0].length;     // number of columns

        int sRow = 0;                 // start row
        int eRow = m - 1;             // end row

        // Binary search to find the correct row
        while (sRow <= eRow) {
            int midRow = sRow + (eRow - sRow) / 2;

            // Check if target lies in this row
            if (matrix[midRow][0] <= target && matrix[midRow][n - 1] >= target) {
                return searchInRow(matrix, target, midRow); // binary search in this row
            }
            // If target is greater, discard upper half
            else if (matrix[midRow][n - 1] < target) {
                sRow = midRow + 1;
            }
            // If target is smaller, discard lower half
            else {
                eRow = midRow - 1;
            }
        }

        return false; // target not found in any row
    }

    // Binary search in a single row
    public boolean searchInRow(int[][] matrix, int target, int row) {
        int n = matrix[0].length;
        int start = 0;
        int end = n - 1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (matrix[row][mid] == target) {
                return true;
            } else if (matrix[row][mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        return false; // target not found in this row
    }
}
--
