// LeetCode: 34
// Problem name: Find First and Last Position of Element in Sorted Array
// https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
// Approach:
// - Use binary search to find first and last occurrences of the target.
// - `getFirst` finds leftmost index of target
// - `getLast` finds rightmost index of target
// - If not found, both return -1

Solution
--
class Solution {
    int getFirst(int[] nums, int x) {
        int low = 0;
        int high = nums.length - 1;
        int first = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == x) {
                first = mid;
                high = mid - 1;
            } else if (nums[mid] < x) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return first;
    }

    int getLast(int[] nums, int x) {
        int low = 0;
        int high = nums.length - 1;
        int last = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == x) {
                last = mid;
                low = mid + 1;
            } else if (nums[mid] < x) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return last;
    }

    public int[] searchRange(int[] nums, int target) {
        int first = getFirst(nums, target);
        int last = getLast(nums, target);
        return new int[]{first, last};
    }
}
--
